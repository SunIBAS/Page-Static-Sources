{"version":3,"file":"static/chunks/pages/converter/json-to-yaml-c8c99322ee30a7ef.js","mappings":"sFACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,0BACA,WACA,OAAeC,EAAQ,MACvB,EACA,8CCNYC,EAeAC,4GAfAD,EAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,mEAQL,IAAME,EAAU,CACrB,CAAEC,MAAK,OAAmBC,MAAO,MAAO,EACxC,CAAED,MAAK,OAAmBC,MAAO,MAAO,EACxC,CAAED,MAAK,MAAkBC,MAAO,KAAM,EACtC,CAAED,MAAK,MAAkBC,MAAO,KAAM,EACvC,EAEWH,EAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,8IASL,IAAMI,EAAc,CACzB,CACED,MAAO,aACPD,MAAK,aACLG,KAAM,YACR,EACA,CACEF,MAAO,sBACPD,MAAK,uBACLG,KAAM,YACR,EACA,CACEF,MAAO,KACPD,MAAK,KACLG,KAAM,IACR,EACA,CACEF,MAAO,cACPD,MAAK,cACLG,KAAM,MACR,EACA,CACEF,MAAO,SACPD,MAAK,SACLG,KAAM,QACR,EACA,CACEF,MAAO,OACPD,MAAK,OACLG,KAAM,MACR,EACD,kUCjDD,IAkBMC,EAAmBC,SAhBEC,CAAe,EAExC,IAAMC,EAAU,CAAC,EAWjB,OARAD,EAAME,OAAO,CAACC,IAEZ,IAAMC,EAAUJ,EAAMK,MAAM,CAACC,GAAMA,IAAOH,EAG1CF,CAAAA,CAAO,CAACE,EAAK,CAAGC,CAClB,GAEOH,CACT,EAhBkBR,EAAAA,EAAOA,CAACc,GAAG,CAACC,GAAUA,EAAOb,KAAK,GAoBvCc,EAAY,IAErB,GAAAC,EAAAC,IAAA,EAACC,EAAAA,CAAIA,CAAAA,CAACC,QAAQ,gBAAgBC,MAAM,mBAClC,GAAAJ,EAAAK,GAAA,EAACC,EAAAA,CAAKA,CAAAA,CAACC,IAAI,KAAKC,GAAG,KAAKL,QAAQ,kBAC9B,GAAAH,EAAAK,GAAA,EAACI,EAAAA,CAAMA,CAAAA,CACLC,UAAWC,IACXC,SAAU,GACVC,KAAK,UACLC,OAAO,KACPC,KAAK,KACLC,MAAM,SACNC,aAAY,GACZC,EAAE,cACFC,aAAc,GAAAnB,EAAAK,GAAA,EAACe,EAAAA,GAAgBA,CAAAA,CAAAA,GAC/BC,MAAO,CACLC,UAAW,6CACXC,OAAQ,MACV,WACD,sBAIH,GAAAvB,EAAAK,GAAA,EAACmB,EAAAA,CAAUA,CAAAA,CAACC,KAAM,EAAGP,EAAE,uBACpBQ,OAAOC,OAAO,CAACvC,GAAkBS,GAAG,CAAC,OAAC,CAACJ,EAAMmC,EAAI,CAAAC,QAChD,GAAA7B,EAAAK,GAAA,EAACyB,EAAAA,CAAIA,CAAAA,CAAYC,cAAc,gBAC5BH,EAAI/B,GAAG,CAACD,GACP,GAAAI,EAAAK,GAAA,EAACyB,EAAAA,CAAIA,CAACE,IAAI,EAAUC,EAAE,iBACpB,GAAAjC,EAAAC,IAAA,EAACiC,EAAAA,CAAMA,CAAAA,CACLxB,UAAWC,IACXC,SAAU,GACVqB,EAAE,QACFpB,KAAM,cAAuCjB,MAAAA,CAAzBH,EAAK0C,WAAW,GAAG,QAAuBC,MAAA,CAAjBxC,EAAGuC,WAAW,cAE1D1C,EAAK,OAAKG,MAPCA,KAFTH,yBCjCd,IAAM4C,EAAW,QAQJtD,EACFA,KATO,CAAEU,KAAAA,CAAI,CAAEG,GAAAA,CAAE,CAAiB,CAAAiC,EAC5CS,EAAYC,CAAAA,EAAAA,EAAAA,MAAAA,EAAY,MACxB,CAACC,EAAiBC,EAAmB,CAAGC,EAAAA,QAAc,CAAC,IACvD,CAACC,EAAiBC,EAAmB,CAAGF,EAAAA,QAAc,CAAC,IACvD,CAACG,EAAkBC,EAAoB,CAAGJ,EAAAA,QAAc,CAAC,IACzD,CAACK,EAAgBC,EAAkB,CAAGN,EAAAA,QAAc,CAAC,GACrD,CAACO,EAAcC,EAAgB,CAAGR,EAAAA,QAAc,CAAC,GAEjDS,EAAAA,OAAYpE,CAAAA,EAAAA,EAAAA,EAAOA,CAACqE,IAAI,CAAC,OAAC,CAAEpE,MAAAA,CAAK,CAAE,CAAA6C,SAAK7C,IAAUS,MAAtCV,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA6CE,KAAK,CAC9DoE,EAAAA,OAAUtE,CAAAA,EAAAA,EAAAA,EAAOA,CAACqE,IAAI,CAAC,OAAC,CAAEpE,MAAAA,CAAK,CAAE,CAAA6C,SAAK7C,IAAUY,MAAtCb,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA2CE,KAAK,CAyBhE,MAvBAqE,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACHX,EAAgBY,MAAM,EAE1B,WACC,GAAI,CACF,IAAMC,EAAO,MAAMC,CAAAA,EAAAA,EAAAA,CAAAA,EAAcd,EAAiBlD,GAC5CiE,EAAU,MAAMC,CAAAA,EAAAA,EAAAA,CAAAA,EAAcC,KAAKC,SAAS,CAACL,GAAO5D,GAC1DkD,EAAoBY,GACpBjB,EAAmB,GACrB,CAAE,MAAOqB,EAAI,CACXrB,EAAmB,IACnBK,EAAoB,GACtB,CACF,IACF,EAAG,CAACrD,EAAMkD,EAAiB/C,EAAG,EAE9B0D,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,SAE6BhB,EAErCA,EAHA,IAAMyB,EACJhB,EAAkBE,EAAiBX,CAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EAAU0B,OAAO,GAAjB1B,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAmB2B,gBAAgB,KAAM,EAE7D,QAAjB3B,CAAAA,EAAAA,EAAU0B,OAAO,GAAjB1B,KAAAA,IAAAA,GAAAA,EAAmB4B,YAAY,CAACH,EAClC,EAAG,CAACd,EAAcF,EAAe,EAG/B,GAAA/C,EAAAC,IAAA,EAACkE,EAAAA,CAAMA,CAAAA,WACL,GAAAnE,EAAAK,GAAA,EAAC+D,EAAAA,EAAOA,CAAAA,CACL,GAAGC,EAAAA,CAAG,CACPC,MAAO,GAAmBjB,MAAAA,CAAhBF,EAAU,QAAcf,MAAA,CAARiB,EAAQ,iBAClCkB,UAAW,mCAA8C3E,MAAAA,CAAXH,EAAK,QAAS2C,MAAA,CAAHxC,GACzD4E,YAAa,WAA2BnB,MAAAA,CAAhBF,EAAU,QAA0DA,MAAAA,CAApDE,EAAQ,8CAAoFF,MAAAA,CAAxCA,EAAU,gCAAwCf,MAAA,CAAVe,EAAU,sBAEhJ,GAAAnD,EAAAC,IAAA,EAACwE,EAAAA,CAASA,CAAAA,CAACC,GAAG,KAAK3D,KAAK,eACtB,GAAAf,EAAAC,IAAA,EAAC0E,EAAAA,CAAKA,CAAAA,CAAC1C,EAAE,kBACNkB,EAAU,OAAKE,EAAQ,gBAE1B,GAAArD,EAAAK,GAAA,EAACN,EAASA,CAAAA,GACV,GAAAC,EAAAC,IAAA,EAACC,EAAAA,CAAIA,CAAAA,CAAC0E,GAAG,KAAKrE,IAAI,eAChB,GAAAP,EAAAC,IAAA,EAAC4E,EAAAA,CAAKA,CAAAA,CAACC,IAAI,QAAQC,WAAU,GAACC,KAAK,IAAI3D,MAAO,CAAE4D,SAAU,QAAS,YACjE,GAAAjF,EAAAK,GAAA,EAAC6E,EAAAA,CAAGA,CAAAA,CAACC,EAAE,KAAKC,GAAG,gBACb,GAAApF,EAAAC,IAAA,EAACC,EAAAA,CAAIA,CAAAA,CAACC,QAAQ,gBAAgBC,MAAM,mBAClC,GAAAJ,EAAAK,GAAA,EAACgF,EAAAA,CAAIA,CAAAA,CAACpD,EAAE,kBAAUkB,IACjBX,GAAqBG,EACpB,GAAA3C,EAAAK,GAAA,EAACiF,EAAAA,GAASA,CAAAA,CAACtE,MAAM,QAEjB,GAAAhB,EAAAK,GAAA,EAACkF,EAAAA,GAAOA,CAAAA,CAACvE,MAAM,oBAIrB,GAAAhB,EAAAK,GAAA,EAACmF,EAAAA,EAAMA,CAAAA,CACLxG,MAAO2D,EACP8C,SAAUzG,GAAS4D,EAAmB5D,GAAS,IAC/C0G,SAAUjG,EACVkG,OAAQ,IACRC,QAASC,EAAAA,CAAaA,CACtBC,QAASC,IACPA,EAAOC,sBAAsB,CAAC,KAC5B9C,EAAgB6C,EAAO9B,gBAAgB,GACzC,GAEA8B,EAAOE,iBAAiB,CAACC,IACvBlD,EAAkBkD,EAAEC,SAAS,CAC/B,EACF,OAGJ,GAAAnG,EAAAC,IAAA,EAAC4E,EAAAA,CAAKA,CAAAA,CAACC,IAAI,QAAQC,WAAU,GAACC,KAAK,IAAI3D,MAAO,CAAE4D,SAAU,QAAS,YACjE,GAAAjF,EAAAK,GAAA,EAAC6E,EAAAA,CAAGA,CAAAA,CAACC,EAAE,KAAKC,GAAG,gBACb,GAAApF,EAAAK,GAAA,EAACgF,EAAAA,CAAIA,CAAAA,CAACpD,EAAE,kBAAUoB,MAEpB,GAAArD,EAAAK,GAAA,EAACmF,EAAAA,EAAMA,CAAAA,CACLxG,MAAO6D,EACP6C,SAAU9F,EACV+F,OAAQ,IACRC,QAAS,CACP,GAAGC,EAAAA,CAAa,CAChBO,SAAU,EACZ,EACAN,QAASC,IACPzD,EAAU0B,OAAO,CAAG+B,CACtB,eAOd,sEChHO,IAAMF,EAAwC,CACnDQ,cAAe,GACfC,aAAc,GACdC,QAAS,EACTC,uBAAwB,GACxBC,QAAS,CAAEC,QAAS,EAAM,EAC1BC,aAAc,CAAED,QAAS,EAAM,EAC/BE,qBAAsB,EACxB,4GCRA,IAAMC,EAAY,CAACC,EAAaC,KAC9B,GAAI,GAAS,kBAAOD,GAAqBE,MAAMC,OAAO,CAACH,EAAAA,GAEhD,GAAIA,EAAII,cAAc,CAACH,GAC5B,OAAOD,CAAG,CAACC,EAAI,CACV,GAAIC,MAAMC,OAAO,CAACH,GACvB,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAAIvD,MAAM,CAAE4D,IAAK,CACnC,IAAMC,EAASP,EAAUC,CAAG,CAACK,EAAE,CAAEJ,GAEjC,GAAIK,EACF,OAAOA,CAEX,MAEA,IAAK,IAAMC,KAAKP,EAAK,CACnB,IAAMM,EAASP,EAAUC,CAAG,CAACO,EAAE,CAAEN,GAEjC,GAAIK,EACF,OAAOA,CAEX,EAGF,MAAO,EACT,EAEM3D,EAAgB,eAAOzE,CAAAA,MAAec,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAASjB,EAAAA,EAAUA,CAAC+E,IAAI,CAClE,GAAI,CACF,GAAM,CAAE0D,KAAAA,CAAI,CAAE,CAAG,MAAM1I,EAAAsH,CAAA,OAAAqB,IAAA,CAAA3I,EAAA4I,IAAA,CAAA5I,EAAA,OACjB,CAAE6I,SAAAA,CAAQ,CAAE,CAAG,MAAM7I,EAAAsH,CAAA,OAAAqB,IAAA,CAAA3I,EAAA4I,IAAA,CAAA5I,EAAA,QACrB,CAAE8I,MAAAA,CAAK,CAAE,CAAG,MAAM9I,EAAAsH,CAAA,OAAAqB,IAAA,CAAA3I,EAAA4I,IAAA,CAAA5I,EAAA,QAClB+I,EAAO,MAAM/I,EAAAsH,CAAA,OAAAqB,IAAA,CAAA3I,EAAAgJ,CAAA,CAAAJ,IAAA,CAAA5I,EAAA,WACbiJ,EAAO,MAAMjJ,EAAAsH,CAAA,OAAAqB,IAAA,CAAA3I,EAAAgJ,CAAA,CAAAJ,IAAA,CAAA5I,EAAA,WAEf4E,EAAe,CAAC,EAOpB,GALI1D,IAAWjB,EAAAA,EAAUA,CAAC+E,IAAI,EAAEJ,CAAAA,EAAOkE,EAAM1I,EAAAA,EACzCc,IAAWjB,EAAAA,EAAUA,CAACiJ,IAAI,EAAEtE,CAAAA,EAAO8D,EAAKtI,EAAAA,EACxCc,IAAWjB,EAAAA,EAAUA,CAACkJ,GAAG,EAAEvE,CAAAA,EAAOmE,EAAKK,UAAU,CAAChJ,EAAAA,EAClDc,IAAWjB,EAAAA,EAAUA,CAACoJ,IAAI,EAAEzE,CAAAA,EAAOqE,EAAKH,KAAK,CAAC1I,EAAAA,EAC9Cc,IAAWjB,EAAAA,EAAUA,CAACqJ,GAAG,EAAE1E,CAAAA,EAAO,MAAMiE,EAASzI,EAAAA,EACjDc,IAAWjB,EAAAA,EAAUA,CAACkJ,GAAG,EAAIlB,EAAUrD,EAAM,eAAgB,MAAM2E,MAAM,kBAE7E,GAAI,CAAC3E,EAAM,MAAM2E,MAAM,iBAEvB,OAAOC,QAAQC,OAAO,CAAC7E,EACzB,CAAE,MAAO8E,EAAY,CACnB,MAAMA,CACR,CACF,EAEM3E,EAAgB,MAAOH,EAAc1D,KACzC,GAAI,CACF,GAAM,CAAEyI,KAAAA,CAAI,CAAE,CAAG,MAAM3J,EAAAsH,CAAA,OAAAqB,IAAA,CAAA3I,EAAA4I,IAAA,CAAA5I,EAAA,OACjB,CAAE4J,SAAAA,CAAQ,CAAE,CAAG,MAAM5J,EAAAsH,CAAA,OAAAqB,IAAA,CAAA3I,EAAA4I,IAAA,CAAA5I,EAAA,QACrB,CAAE8I,MAAAA,CAAK,CAAE,CAAG,MAAM9I,EAAAsH,CAAA,OAAAqB,IAAA,CAAA3I,EAAA4I,IAAA,CAAA5I,EAAA,QAEpB6J,EAAWjF,EAEf,GAAI,CAACA,EAAM,OAAOA,EAOlB,OANI1D,IAAWjB,EAAAA,EAAUA,CAAC+E,IAAI,EAAE6E,CAAAA,EAAWjF,CAAAA,EACvC1D,IAAWjB,EAAAA,EAAUA,CAACiJ,IAAI,EAAEW,CAAAA,EAAWF,EAAKb,EAAMlE,GAAAA,EAClD1D,IAAWjB,EAAAA,EAAUA,CAACkJ,GAAG,EAAEU,CAAAA,EAAWF,EAAKb,EAAMlE,GAAAA,EACjD1D,IAAWjB,EAAAA,EAAUA,CAACoJ,IAAI,EAAEQ,CAAAA,EAAWF,EAAKb,EAAMlE,GAAAA,EAClD1D,IAAWjB,EAAAA,EAAUA,CAACqJ,GAAG,EAAEO,CAAAA,EAAW,MAAMD,EAASd,EAAMlE,GAAAA,EAExD4E,QAAQC,OAAO,CAACI,EACzB,CAAE,MAAOH,EAAY,CACnB,MAAMA,CACR,CACF,8FChEAI,CAAAA,EAAA,QAJa,IACJ,GAAAC,EAAAtI,GAAA,EAACgC,EAAAA,CAAQA,CAAAA,CAAC5C,KAAMZ,EAAAA,EAAUA,CAAC+E,IAAI,CAAEhE,GAAIf,EAAAA,EAAUA,CAACiJ,IAAI","sources":["webpack://_N_E/?ee4a","webpack://_N_E/./src/enums/file.enum.ts","webpack://_N_E/./src/layout/ConverterLayout/PageLinks.tsx","webpack://_N_E/./src/layout/ConverterLayout/ToolPage.tsx","webpack://_N_E/./src/layout/ConverterLayout/options.ts","webpack://_N_E/./src/lib/utils/jsonAdapter.ts","webpack://_N_E/./src/pages/converter/json-to-yaml.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/converter/json-to-yaml\",\n      function () {\n        return require(\"private-next-pages/converter/json-to-yaml.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/converter/json-to-yaml\"])\n      });\n    }\n  ","export enum FileFormat {\r\n  \"JSON\" = \"json\",\r\n  \"YAML\" = \"yaml\",\r\n  \"XML\" = \"xml\",\r\n  \"TOML\" = \"toml\",\r\n  \"CSV\" = \"csv\",\r\n}\r\n\r\nexport const formats = [\r\n  { value: FileFormat.JSON, label: \"JSON\" },\r\n  { value: FileFormat.YAML, label: \"YAML\" },\r\n  { value: FileFormat.XML, label: \"XML\" },\r\n  { value: FileFormat.CSV, label: \"CSV\" },\r\n];\r\n\r\nexport enum TypeLanguage {\r\n  TypeScript = \"typescript\",\r\n  TypeScript_Combined = \"typescript/typealias\",\r\n  Go = \"go\",\r\n  JSON_SCHEMA = \"json_schema\",\r\n  Kotlin = \"kotlin\",\r\n  Rust = \"rust\",\r\n}\r\n\r\nexport const typeOptions = [\r\n  {\r\n    label: \"TypeScript\",\r\n    value: TypeLanguage.TypeScript,\r\n    lang: \"typescript\",\r\n  },\r\n  {\r\n    label: \"TypeScript (merged)\",\r\n    value: TypeLanguage.TypeScript_Combined,\r\n    lang: \"typescript\",\r\n  },\r\n  {\r\n    label: \"Go\",\r\n    value: TypeLanguage.Go,\r\n    lang: \"go\",\r\n  },\r\n  {\r\n    label: \"JSON Schema\",\r\n    value: TypeLanguage.JSON_SCHEMA,\r\n    lang: \"json\",\r\n  },\r\n  {\r\n    label: \"Kotlin\",\r\n    value: TypeLanguage.Kotlin,\r\n    lang: \"kotlin\",\r\n  },\r\n  {\r\n    label: \"Rust\",\r\n    value: TypeLanguage.Rust,\r\n    lang: \"rust\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport Link from \"next/link\";\r\nimport { Anchor, Button, Flex, List, SimpleGrid, Stack } from \"@mantine/core\";\r\nimport { FaArrowRightLong } from \"react-icons/fa6\";\r\nimport { formats } from \"../../enums/file.enum\";\r\n\r\nconst languages = formats.map(format => format.label);\r\n\r\nfunction groupCombinations(array: string[]): Record<string, string[]> {\r\n  // Create an object to hold the grouped combinations\r\n  const grouped = {};\r\n\r\n  // Iterate over each item in the array\r\n  array.forEach(from => {\r\n    // Filter out the same item for the \"to\" array\r\n    const targets = array.filter(to => to !== from);\r\n\r\n    // Add the \"from\" item as the key and the \"to\" items as the value array\r\n    grouped[from] = targets;\r\n  });\r\n\r\n  return grouped;\r\n}\r\n\r\nconst groupedLanguages = groupCombinations(languages);\r\n\r\nexport const PageLinks = () => {\r\n  return (\r\n    <Flex justify=\"space-between\" align=\"center\">\r\n      <Stack gap=\"sm\" py=\"md\" justify=\"center\">\r\n        <Button\r\n          component={Link}\r\n          prefetch={false}\r\n          href=\"/editor\"\r\n          radius=\"md\"\r\n          size=\"sm\"\r\n          color=\"dark.5\"\r\n          autoContrast\r\n          w=\"fit-content\"\r\n          rightSection={<FaArrowRightLong />}\r\n          style={{\r\n            boxShadow: \"rgba(0, 0, 0, 0.12) 0px -3px 0px 0px inset\",\r\n            border: \"none\",\r\n          }}\r\n        >\r\n          Open JSON Crack\r\n        </Button>\r\n      </Stack>\r\n      <SimpleGrid cols={4} w=\"fit-content\">\r\n        {Object.entries(groupedLanguages).map(([from, tos]) => (\r\n          <List key={from} listStyleType=\"none\">\r\n            {tos.map(to => (\r\n              <List.Item key={to} c=\"black\">\r\n                <Anchor\r\n                  component={Link}\r\n                  prefetch={false}\r\n                  c=\"black\"\r\n                  href={`/converter/${from.toLowerCase()}-to-${to.toLowerCase()}`}\r\n                >\r\n                  {from} to {to}\r\n                </Anchor>\r\n              </List.Item>\r\n            ))}\r\n          </List>\r\n        ))}\r\n      </SimpleGrid>\r\n    </Flex>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { Box, Container, Flex, Paper, Text, Title } from \"@mantine/core\";\r\nimport { Editor } from \"@monaco-editor/react\";\r\nimport { NextSeo } from \"next-seo\";\r\nimport { LuCheck, LuCircleX } from \"react-icons/lu\";\r\nimport { SEO } from \"../../constants/seo\";\r\nimport { type FileFormat, formats } from \"../../enums/file.enum\";\r\nimport { contentToJson, jsonToContent } from \"../../lib/utils/jsonAdapter\";\r\nimport Layout from \"../PageLayout\";\r\nimport { PageLinks } from \"./PageLinks\";\r\nimport { editorOptions } from \"./options\";\r\n\r\ninterface ToolPageProps {\r\n  from: FileFormat;\r\n  to: FileFormat;\r\n}\r\n\r\nexport const ToolPage = ({ from, to }: ToolPageProps) => {\r\n  const editorRef = useRef<any>(null);\r\n  const [contentHasError, setContentHasError] = React.useState(false);\r\n  const [originalContent, setOriginalContent] = React.useState(\"\");\r\n  const [convertedContent, setConvertedContent] = React.useState(\"\");\r\n  const [scrollPosition, setScrollPosition] = React.useState(0);\r\n  const [editorHeight, setEditorHeight] = React.useState(0);\r\n\r\n  const fromLabel = formats.find(({ value }) => value === from)?.label;\r\n  const toLabel = formats.find(({ value }) => value === to)?.label;\r\n\r\n  useEffect(() => {\r\n    if (!originalContent.length) return;\r\n\r\n    (async () => {\r\n      try {\r\n        const json = await contentToJson(originalContent, from);\r\n        const content = await jsonToContent(JSON.stringify(json), to);\r\n        setConvertedContent(content);\r\n        setContentHasError(false);\r\n      } catch (_e) {\r\n        setContentHasError(true);\r\n        setConvertedContent(\"\");\r\n      }\r\n    })();\r\n  }, [from, originalContent, to]);\r\n\r\n  useEffect(() => {\r\n    const scrollPositionRatio =\r\n      (scrollPosition / editorHeight) * (editorRef.current?.getContentHeight() || 0);\r\n\r\n    editorRef.current?.setScrollTop(scrollPositionRatio);\r\n  }, [editorHeight, scrollPosition]);\r\n\r\n  return (\r\n    <Layout>\r\n      <NextSeo\r\n        {...SEO}\r\n        title={`${fromLabel} to ${toLabel} | JSON Crack`}\r\n        canonical={`https://jsoncrack.com/converter/${from}-to-${to}`}\r\n        description={`Convert ${fromLabel} to ${toLabel} using this free online tool. Upload your ${fromLabel} file and get the converted ${fromLabel} file instantly.`}\r\n      />\r\n      <Container mt=\"xl\" size=\"lg\">\r\n        <Title c=\"black\">\r\n          {fromLabel} to {toLabel} Converter\r\n        </Title>\r\n        <PageLinks />\r\n        <Flex pt=\"lg\" gap=\"40\">\r\n          <Paper mah=\"600px\" withBorder flex=\"1\" style={{ overflow: \"hidden\" }}>\r\n            <Box p=\"xs\" bg=\"gray\">\r\n              <Flex justify=\"space-between\" align=\"center\">\r\n                <Text c=\"gray.3\">{fromLabel}</Text>\r\n                {contentHasError && !!originalContent ? (\r\n                  <LuCircleX color=\"red\" />\r\n                ) : (\r\n                  <LuCheck color=\"lightgreen\" />\r\n                )}\r\n              </Flex>\r\n            </Box>\r\n            <Editor\r\n              value={originalContent}\r\n              onChange={value => setOriginalContent(value || \"\")}\r\n              language={from}\r\n              height={500}\r\n              options={editorOptions}\r\n              onMount={editor => {\r\n                editor.onDidContentSizeChange(() => {\r\n                  setEditorHeight(editor.getContentHeight());\r\n                });\r\n\r\n                editor.onDidScrollChange(e => {\r\n                  setScrollPosition(e.scrollTop);\r\n                });\r\n              }}\r\n            />\r\n          </Paper>\r\n          <Paper mah=\"600px\" withBorder flex=\"1\" style={{ overflow: \"hidden\" }}>\r\n            <Box p=\"xs\" bg=\"gray\">\r\n              <Text c=\"gray.3\">{toLabel}</Text>\r\n            </Box>\r\n            <Editor\r\n              value={convertedContent}\r\n              language={to}\r\n              height={500}\r\n              options={{\r\n                ...editorOptions,\r\n                readOnly: true,\r\n              }}\r\n              onMount={editor => {\r\n                editorRef.current = editor;\r\n              }}\r\n            />\r\n          </Paper>\r\n        </Flex>\r\n      </Container>\r\n    </Layout>\r\n  );\r\n};\r\n","import type { EditorProps } from \"@monaco-editor/react\";\r\n\r\nexport const editorOptions: EditorProps[\"options\"] = {\r\n  formatOnPaste: true,\r\n  formatOnType: true,\r\n  tabSize: 2,\r\n  stopRenderingLineAfter: -1,\r\n  minimap: { enabled: false },\r\n  stickyScroll: { enabled: false },\r\n  scrollBeyondLastLine: false,\r\n};\r\n","import { FileFormat } from \"../../enums/file.enum\";\r\n\r\nconst keyExists = (obj: object, key: string) => {\r\n  if (!obj || (typeof obj !== \"object\" && !Array.isArray(obj))) {\r\n    return false;\r\n  } else if (obj.hasOwnProperty(key)) {\r\n    return obj[key];\r\n  } else if (Array.isArray(obj)) {\r\n    for (let i = 0; i < obj.length; i++) {\r\n      const result = keyExists(obj[i], key);\r\n\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n  } else {\r\n    for (const k in obj) {\r\n      const result = keyExists(obj[k], key);\r\n\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst contentToJson = async (value: string, format = FileFormat.JSON): Promise<object> => {\r\n  try {\r\n    const { load } = await import(\"js-yaml\");\r\n    const { csv2json } = await import(\"json-2-csv\");\r\n    const { parse } = await import(\"jsonc-parser\");\r\n    const jxon = await import(\"jxon\");\r\n    const toml = await import(\"toml\");\r\n\r\n    let json: object = {};\r\n\r\n    if (format === FileFormat.JSON) json = parse(value);\r\n    if (format === FileFormat.YAML) json = load(value) as object;\r\n    if (format === FileFormat.XML) json = jxon.stringToJs(value);\r\n    if (format === FileFormat.TOML) json = toml.parse(value);\r\n    if (format === FileFormat.CSV) json = await csv2json(value);\r\n    if (format === FileFormat.XML && keyExists(json, \"parsererror\")) throw Error(\"Unknown error!\");\r\n\r\n    if (!json) throw Error(\"Invalid JSON!\");\r\n\r\n    return Promise.resolve(json);\r\n  } catch (error: any) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst jsonToContent = async (json: string, format: FileFormat): Promise<string> => {\r\n  try {\r\n    const { dump } = await import(\"js-yaml\");\r\n    const { json2csv } = await import(\"json-2-csv\");\r\n    const { parse } = await import(\"jsonc-parser\");\r\n\r\n    let contents = json;\r\n\r\n    if (!json) return json;\r\n    if (format === FileFormat.JSON) contents = json;\r\n    if (format === FileFormat.YAML) contents = dump(parse(json));\r\n    if (format === FileFormat.XML) contents = dump(parse(json));\r\n    if (format === FileFormat.TOML) contents = dump(parse(json));\r\n    if (format === FileFormat.CSV) contents = await json2csv(parse(json));\r\n\r\n    return Promise.resolve(contents);\r\n  } catch (error: any) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport { contentToJson, jsonToContent };\r\n","import React from \"react\";\r\nimport { FileFormat } from \"../../enums/file.enum\";\r\nimport { ToolPage } from \"../../layout/ConverterLayout/ToolPage\";\r\n\r\nconst Page = () => {\r\n  return <ToolPage from={FileFormat.JSON} to={FileFormat.YAML} />;\r\n};\r\n\r\nexport default Page;\r\n"],"names":["window","__NEXT_P","push","__webpack_require__","FileFormat","TypeLanguage","formats","value","label","typeOptions","lang","groupedLanguages","groupCombinations","array","grouped","forEach","from","targets","filter","to","map","format","PageLinks","jsx_runtime","jsxs","Flex","justify","align","jsx","Stack","gap","py","Button","component","Link","prefetch","href","radius","size","color","autoContrast","w","rightSection","FaArrowRightLong","style","boxShadow","border","SimpleGrid","cols","Object","entries","tos","param","List","listStyleType","Item","c","Anchor","toLowerCase","concat","ToolPage","editorRef","useRef","contentHasError","setContentHasError","React","originalContent","setOriginalContent","convertedContent","setConvertedContent","scrollPosition","setScrollPosition","editorHeight","setEditorHeight","fromLabel","find","toLabel","useEffect","length","json","contentToJson","content","jsonToContent","JSON","stringify","_e","scrollPositionRatio","current","getContentHeight","setScrollTop","Layout","NextSeo","SEO","title","canonical","description","Container","mt","Title","pt","Paper","mah","withBorder","flex","overflow","Box","p","bg","Text","LuCircleX","LuCheck","Editor","onChange","language","height","options","editorOptions","onMount","editor","onDidContentSizeChange","onDidScrollChange","e","scrollTop","readOnly","formatOnPaste","formatOnType","tabSize","stopRenderingLineAfter","minimap","enabled","stickyScroll","scrollBeyondLastLine","keyExists","obj","key","Array","isArray","hasOwnProperty","i","result","k","load","then","bind","csv2json","parse","jxon","t","toml","YAML","XML","stringToJs","TOML","CSV","Error","Promise","resolve","error","dump","json2csv","contents","__webpack_exports__","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__"],"sourceRoot":""}