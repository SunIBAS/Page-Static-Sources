{"version":3,"file":"static/chunks/pages/type/json-to-go-49993e9156d72d91.js","mappings":"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","sources":["webpack://_N_E/?de1f","webpack://_N_E/./src/enums/file.enum.ts","webpack://_N_E/./src/layout/ConverterLayout/options.ts","webpack://_N_E/./src/layout/TypeLayout/PageLinks.tsx","webpack://_N_E/./src/layout/TypeLayout/TypegenWrapper.tsx","webpack://_N_E/./src/lib/utils/generateType.ts","webpack://_N_E/./src/lib/utils/jsonAdapter.ts","webpack://_N_E/./src/pages/type/json-to-go.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/type/json-to-go\",\n      function () {\n        return require(\"private-next-pages/type/json-to-go.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/type/json-to-go\"])\n      });\n    }\n  ","export enum FileFormat {\r\n  \"JSON\" = \"json\",\r\n  \"YAML\" = \"yaml\",\r\n  \"XML\" = \"xml\",\r\n  \"TOML\" = \"toml\",\r\n  \"CSV\" = \"csv\",\r\n}\r\n\r\nexport const formats = [\r\n  { value: FileFormat.JSON, label: \"JSON\" },\r\n  { value: FileFormat.YAML, label: \"YAML\" },\r\n  { value: FileFormat.XML, label: \"XML\" },\r\n  { value: FileFormat.CSV, label: \"CSV\" },\r\n];\r\n\r\nexport enum TypeLanguage {\r\n  TypeScript = \"typescript\",\r\n  TypeScript_Combined = \"typescript/typealias\",\r\n  Go = \"go\",\r\n  JSON_SCHEMA = \"json_schema\",\r\n  Kotlin = \"kotlin\",\r\n  Rust = \"rust\",\r\n}\r\n\r\nexport const typeOptions = [\r\n  {\r\n    label: \"TypeScript\",\r\n    value: TypeLanguage.TypeScript,\r\n    lang: \"typescript\",\r\n  },\r\n  {\r\n    label: \"TypeScript (merged)\",\r\n    value: TypeLanguage.TypeScript_Combined,\r\n    lang: \"typescript\",\r\n  },\r\n  {\r\n    label: \"Go\",\r\n    value: TypeLanguage.Go,\r\n    lang: \"go\",\r\n  },\r\n  {\r\n    label: \"JSON Schema\",\r\n    value: TypeLanguage.JSON_SCHEMA,\r\n    lang: \"json\",\r\n  },\r\n  {\r\n    label: \"Kotlin\",\r\n    value: TypeLanguage.Kotlin,\r\n    lang: \"kotlin\",\r\n  },\r\n  {\r\n    label: \"Rust\",\r\n    value: TypeLanguage.Rust,\r\n    lang: \"rust\",\r\n  },\r\n];\r\n","import type { EditorProps } from \"@monaco-editor/react\";\r\n\r\nexport const editorOptions: EditorProps[\"options\"] = {\r\n  formatOnPaste: true,\r\n  formatOnType: true,\r\n  tabSize: 2,\r\n  stopRenderingLineAfter: -1,\r\n  minimap: { enabled: false },\r\n  stickyScroll: { enabled: false },\r\n  scrollBeyondLastLine: false,\r\n};\r\n","import React from \"react\";\r\nimport Link from \"a_next/link\";\r\nimport { Anchor, Button, Flex, List, SimpleGrid, Stack } from \"@mantine/core\";\r\nimport { FaArrowRightLong } from \"react-icons/fa6\";\r\nimport { formats, TypeLanguage, typeOptions } from \"../../enums/file.enum\";\r\n\r\ntype MappedCombinations = {\r\n  [language: string]: string[]; // Maps each language to an array of programming languages\r\n};\r\n\r\nfunction mapLanguagesToProgramming(\r\n  languages: string[],\r\n  programmingLanguages: string[]\r\n): MappedCombinations {\r\n  const mappedCombinations: MappedCombinations = {};\r\n\r\n  // Iterate over each language\r\n  languages.forEach(language => {\r\n    // Assign the array of programming languages to each language key\r\n    mappedCombinations[language] = programmingLanguages;\r\n  });\r\n\r\n  return mappedCombinations;\r\n}\r\n\r\nconst filterProgrammingLanguages = [TypeLanguage.TypeScript_Combined, TypeLanguage.JSON_SCHEMA];\r\n\r\nconst languages = formats.map(format => format.label);\r\n\r\nconst programmingLanguages = typeOptions\r\n  .filter(option => !filterProgrammingLanguages.includes(option.value))\r\n  .map(option => option.label);\r\n\r\nconst groupedLanguages = mapLanguagesToProgramming(languages, programmingLanguages);\r\n\r\nexport const PageLinks = () => {\r\n  return (\r\n    <Flex justify=\"space-between\" align=\"center\">\r\n      <Stack gap=\"sm\" py=\"md\" justify=\"center\">\r\n        <Button\r\n          component={Link}\r\n          prefetch={false}\r\n          href=\"/editor\"\r\n          radius=\"md\"\r\n          size=\"sm\"\r\n          color=\"dark.5\"\r\n          autoContrast\r\n          w=\"fit-content\"\r\n          rightSection={<FaArrowRightLong />}\r\n          style={{\r\n            boxShadow: \"rgba(0, 0, 0, 0.12) 0px -3px 0px 0px inset\",\r\n            border: \"none\",\r\n          }}\r\n        >\r\n          Open JSON Crack\r\n        </Button>\r\n      </Stack>\r\n      <SimpleGrid cols={4} w=\"fit-content\">\r\n        {Object.entries(groupedLanguages).map(([from, tos]) => (\r\n          <List key={from} listStyleType=\"none\">\r\n            {tos.map(to => (\r\n              <List.Item key={to} c=\"black\">\r\n                <Anchor\r\n                  component={Link}\r\n                  prefetch={false}\r\n                  c=\"black\"\r\n                  href={`/type/${from.toLowerCase()}-to-${to.toLowerCase()}`}\r\n                >\r\n                  {from} to {to}\r\n                </Anchor>\r\n              </List.Item>\r\n            ))}\r\n          </List>\r\n        ))}\r\n      </SimpleGrid>\r\n    </Flex>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { Box, Container, Flex, Paper, Title, Text } from \"@mantine/core\";\r\nimport { Editor } from \"@monaco-editor/react\";\r\nimport { NextSeo } from \"next-seo\";\r\nimport { LuCheck, LuCircleX } from \"react-icons/lu\";\r\nimport { SEO } from \"../../constants/seo\";\r\nimport { type FileFormat, formats, type TypeLanguage, typeOptions } from \"../../enums/file.enum\";\r\nimport { editorOptions } from \"../../layout/ConverterLayout/options\";\r\nimport Layout from \"../../layout/PageLayout\";\r\nimport { generateType } from \"../../lib/utils/generateType\";\r\nimport { PageLinks } from \"./PageLinks\";\r\n\r\ninterface ConverterPagesProps {\r\n  from: FileFormat;\r\n  to: TypeLanguage;\r\n}\r\n\r\nexport const TypegenWrapper = ({ from, to }: ConverterPagesProps) => {\r\n  const editorRef = useRef<any>(null);\r\n  const [contentHasError, setContentHasError] = React.useState(false);\r\n  const [originalContent, setOriginalContent] = React.useState(\"\");\r\n  const [convertedContent, setConvertedContent] = React.useState(\"\");\r\n\r\n  const fromLabel = formats.find(({ value }) => value === from)?.label;\r\n  const toLabel = typeOptions.find(({ value }) => value === to)?.label;\r\n\r\n  useEffect(() => {\r\n    if (!originalContent.length) return;\r\n\r\n    (async () => {\r\n      try {\r\n        const type = await generateType(originalContent, from, to);\r\n        setConvertedContent(type);\r\n        setContentHasError(false);\r\n      } catch (_e) {\r\n        setContentHasError(true);\r\n        setConvertedContent(\"\");\r\n      }\r\n    })();\r\n  }, [from, originalContent, to]);\r\n\r\n  return (\r\n    <Layout>\r\n      <NextSeo\r\n        {...SEO}\r\n        title={`${fromLabel} to ${toLabel} | JSON Crack`}\r\n        canonical={`https://jsoncrack.com/converter/${from}-to-${to}`}\r\n        description={`Instantly generate ${toLabel} from ${fromLabel} using this free online tool. Paste your ${fromLabel} and get the generated ${toLabel} instantly.`}\r\n      />\r\n      <Container mt=\"xl\" size=\"lg\">\r\n        <Title c=\"black\">\r\n          {fromLabel} to {toLabel} Converter\r\n        </Title>\r\n        <PageLinks />\r\n        <Flex pt=\"lg\" gap=\"40\">\r\n          <Paper mah=\"600px\" withBorder flex=\"1\" style={{ overflow: \"hidden\" }}>\r\n            <Box p=\"xs\" bg=\"gray\">\r\n              <Flex justify=\"space-between\" align=\"center\">\r\n                <Text c=\"gray.3\">{fromLabel}</Text>\r\n                {contentHasError && !!originalContent ? (\r\n                  <LuCircleX color=\"red\" />\r\n                ) : (\r\n                  <LuCheck color=\"lightgreen\" />\r\n                )}\r\n              </Flex>\r\n            </Box>\r\n            <Editor\r\n              value={originalContent}\r\n              onChange={value => setOriginalContent(value || \"\")}\r\n              language={from}\r\n              height={500}\r\n              options={editorOptions}\r\n            />\r\n          </Paper>\r\n          <Paper mah=\"600px\" withBorder flex=\"1\" style={{ overflow: \"hidden\" }}>\r\n            <Box p=\"xs\" bg=\"gray\">\r\n              <Text c=\"gray.3\">{toLabel}</Text>\r\n            </Box>\r\n            <Editor\r\n              value={convertedContent}\r\n              language={to}\r\n              height={500}\r\n              options={{\r\n                ...editorOptions,\r\n                readOnly: true,\r\n              }}\r\n              onMount={editor => {\r\n                editorRef.current = editor;\r\n              }}\r\n            />\r\n          </Paper>\r\n        </Flex>\r\n      </Container>\r\n    </Layout>\r\n  );\r\n};\r\n","import { type FileFormat, TypeLanguage } from \"../../enums/file.enum\";\r\nimport { contentToJson } from \"./jsonAdapter\";\r\n\r\nexport const generateType = async (input: string, format: FileFormat, output: TypeLanguage) => {\r\n  try {\r\n    const inputToJson = await contentToJson(input, format);\r\n    const jsonString = JSON.stringify(inputToJson);\r\n\r\n    if (output === TypeLanguage.Go) {\r\n      const json2go = await import(\"../../lib/utils/json2go.js\");\r\n      const gofmt = await import(\"gofmt.js\");\r\n      const types = json2go.default(jsonString);\r\n\r\n      return gofmt.default(types.go);\r\n    } else {\r\n      const { run } = await import(\"json_typegen_wasm\");\r\n      return run(\"Root\", jsonString, JSON.stringify({ output_mode: output }));\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    return \"\";\r\n  }\r\n};\r\n","import { FileFormat } from \"../../enums/file.enum\";\r\n\r\nconst keyExists = (obj: object, key: string) => {\r\n  if (!obj || (typeof obj !== \"object\" && !Array.isArray(obj))) {\r\n    return false;\r\n  } else if (obj.hasOwnProperty(key)) {\r\n    return obj[key];\r\n  } else if (Array.isArray(obj)) {\r\n    for (let i = 0; i < obj.length; i++) {\r\n      const result = keyExists(obj[i], key);\r\n\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n  } else {\r\n    for (const k in obj) {\r\n      const result = keyExists(obj[k], key);\r\n\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst contentToJson = async (value: string, format = FileFormat.JSON): Promise<object> => {\r\n  try {\r\n    const { load } = await import(\"js-yaml\");\r\n    const { csv2json } = await import(\"json-2-csv\");\r\n    const { parse } = await import(\"jsonc-parser\");\r\n    const jxon = await import(\"jxon\");\r\n    const toml = await import(\"toml\");\r\n\r\n    let json: object = {};\r\n\r\n    if (format === FileFormat.JSON) json = parse(value);\r\n    if (format === FileFormat.YAML) json = load(value) as object;\r\n    if (format === FileFormat.XML) json = jxon.stringToJs(value);\r\n    if (format === FileFormat.TOML) json = toml.parse(value);\r\n    if (format === FileFormat.CSV) json = await csv2json(value);\r\n    if (format === FileFormat.XML && keyExists(json, \"parsererror\")) throw Error(\"Unknown error!\");\r\n\r\n    if (!json) throw Error(\"Invalid JSON!\");\r\n\r\n    return Promise.resolve(json);\r\n  } catch (error: any) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst jsonToContent = async (json: string, format: FileFormat): Promise<string> => {\r\n  try {\r\n    const { dump } = await import(\"js-yaml\");\r\n    const { json2csv } = await import(\"json-2-csv\");\r\n    const { parse } = await import(\"jsonc-parser\");\r\n\r\n    let contents = json;\r\n\r\n    if (!json) return json;\r\n    if (format === FileFormat.JSON) contents = json;\r\n    if (format === FileFormat.YAML) contents = dump(parse(json));\r\n    if (format === FileFormat.XML) contents = dump(parse(json));\r\n    if (format === FileFormat.TOML) contents = dump(parse(json));\r\n    if (format === FileFormat.CSV) contents = await json2csv(parse(json));\r\n\r\n    return Promise.resolve(contents);\r\n  } catch (error: any) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport { contentToJson, jsonToContent };\r\n","import React from \"react\";\r\nimport { FileFormat, TypeLanguage } from \"../../enums/file.enum\";\r\nimport { TypegenWrapper } from \"../../layout/TypeLayout/TypegenWrapper\";\r\n\r\nconst TypePage = () => {\r\n  return <TypegenWrapper from={FileFormat.JSON} to={TypeLanguage.Go} />;\r\n};\r\n\r\nexport default TypePage;\r\n"],"names":["window","__NEXT_P","push","__webpack_require__","FileFormat","TypeLanguage","formats","value","label","typeOptions","lang","editorOptions","formatOnPaste","formatOnType","tabSize","stopRenderingLineAfter","minimap","enabled","stickyScroll","scrollBeyondLastLine","filterProgrammingLanguages","TypeScript_Combined","JSON_SCHEMA","groupedLanguages","mapLanguagesToProgramming","languages","programmingLanguages","mappedCombinations","forEach","language","map","format","filter","option","includes","PageLinks","jsx_runtime","jsxs","Flex","justify","align","jsx","Stack","gap","py","Button","component","Link","prefetch","href","radius","size","color","autoContrast","w","rightSection","FaArrowRightLong","style","boxShadow","border","SimpleGrid","cols","Object","entries","from","tos","param","List","listStyleType","to","Item","c","Anchor","toLowerCase","concat","TypegenWrapper","editorRef","useRef","contentHasError","setContentHasError","React","originalContent","setOriginalContent","convertedContent","setConvertedContent","fromLabel","find","toLabel","useEffect","length","type","generateType","_e","Layout","NextSeo","SEO","title","canonical","description","Container","mt","Title","pt","Paper","mah","withBorder","flex","overflow","Box","p","bg","Text","LuCircleX","LuCheck","Editor","onChange","height","options","readOnly","onMount","editor","current","input","output","inputToJson","contentToJson","jsonString","JSON","stringify","Go","json2go","e","then","t","bind","gofmt","Promise","all","types","default","go","run","output_mode","error","console","keyExists","obj","key","Array","isArray","hasOwnProperty","i","result","k","load","csv2json","parse","jxon","toml","json","YAML","XML","stringToJs","TOML","CSV","Error","resolve","jsonToContent","dump","json2csv","contents","__webpack_exports__","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__"],"sourceRoot":""}
